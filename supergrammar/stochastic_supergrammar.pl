:-module(stochastic_supergrammar, []).

:-add_import_module(stochastic_supergrammar, supergrammar, start).

%!	initial_probability(?P) is det.
%
%      Starting probability of a new production.
initial_probability(0).


% generate_stochastic(_Rule_complexity,_Derivation_length,_Inference_limit,_Options):-
generate_stochastic(Example,Production,Probability,Augmented):-
	clear_productions
	% take the next example
	,configuration:example_string(Example)
	% create a new rule
	% set its probability to 0
	,empty_production(Production, Probability)
	% take the next token (terminal or nonterminal)
	,next_token(Example, Token)
	% augment the new rule
	,augmented_production(Production, Token, Augmented)
	% calculate its probability
	% compare the two probabilities
	% Choose a rule (new or old)
	% repeat from augment step
	% prune the examples
	% repeat from the top
	% exit if there are no more examples.
	.


%!	empty_production(-Production, -Probability) is det.
%
%	Production is a new, empty production with the default initial
%	Probability.
%
%	Productions generated by empty_production/2 are in the form of
%	DCG rules with a push-back list for probabilities.
%
empty_production(P, R):-
	once(rule_name(N))
	,initial_probability(R)
	,dcg_translate_rule((N, [R] --> []), P).


%!	next_token(+Example, -Token) is nondet.
%
%	Generates all terminals and nonterminals for augmenting a rule
%	on subsequent backtracking.
next_token(Example, Token):-
	all_tokens(Example, Tokens)
	,member(Token, Tokens).


%!	all_tokens(+Example, -Tokens) is det.
%
%	Generate all tokens that are either part of Example or a
%	nonterminal in the grammar of the target language.
all_tokens(Example, Tokens):-
	findall(N
	       ,phrase(language, [N])
	       ,Nonterminals)
	,findall(T
		,member(T, Example)
		,Terminals)
	,flatten([Nonterminals|Terminals], Tokens).


%!	augmented_production(+Production,+Token,-New_production) is nondet.
%
%	Augment the rule with a single terminal or nonterminal Inserts
%	that Token to the right end of the body of the given Production
%	rule, producting a New_production.
augmented_production((H:-true), Token, Production):-
	dcg_translate_rule((H --> [Token]), Production).
augmented_production((H:-T), Token, Production):-
	is_list(T) % The rule is a nonterminal.
	,T =.. [Name|Args]
	,reverse([Token|Args], New) % Place new token on right end
	,Tt =.. [Name|New]
	,dcg_translate_rule((H --> Tt), Production).



